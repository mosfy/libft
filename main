#include "libft.h"

int main(void)
{
    printf("Longueur de 'Hello' = %ld\n", ft_strlen("Hello"));

	char str0[50] = "GeeksForGeeks is for programming geeks.";
	printf("\nBefore memset(): %s\n", str0);

	// Fill 8 characters starting from str[13] with '.'
	ft_memset(str0 + 13, '.', 8*sizeof(char));

	printf("After memset():  %s", str0);

	char str1[50] = "GeeksForGeeks is for programming geeks.";
	printf("\nBefore bzero(): %s\n", str1);

	// Fill 8 characters starting from str[13] with '.'
	bzero(str1 + 10, 10);

	printf("After bzero():  %s", str1);
	
	char str2[50] = "GeeksForGeeks is for programming geeks.";
	printf("\nBefore ft_bzero(): %s\n", str2);

	// Fill 8 characters starting from str[13] with '.'
	ft_bzero(str2 + 10, 10);
	
	printf("After ft_bzero():  %s\n", str2); 

	// Initialize a variable
    int a = 20;
    int b = 10;
    
    printf("Value of b before calling memcpy: %d\n", b);

    // Use memcpy to copy the value of 'a' into 'b'
    memcpy(&b, &a, sizeof(int)); 

    printf("Value of b after calling memcpy: %d\n", b);

    // Initialize a variable
     a = 20;
     b = 10;
    
    printf("Value of b before calling ft_memcpy: %d\n", b);

    // Use memcpy to copy the value of 'a' into 'b'
    ft_memcpy(&b, &a, sizeof(int)); 

    printf("Value of b after calling ft_memcpy: %d\n", b);
	

	char str4[50] = "123456789";
	printf("\nBefore memcpy(): %s\n", str4);

	memcpy(str4,str4+2,5);

	printf("After memcpy():  %s\n", str4);

	char str7[50] = "123456789";
	printf("\nBefore ft_memcpy(): %s\n", str7);

	ft_memcpy(str7,str7+2,5);

	printf("After ft_memcpy():  %s\n", str7);

	char str3[50] = "123456789";
	printf("\nBefore memmove(): %s\n", str3);

	memmove(str3,str3+2,5);

	printf("After memmove():  %s\n", str3);

	char str10[50] = "123456789";
	printf("\nBefore ft_memmove(): %s\n", str10);

	ft_memmove(str10,str10+2,5);

	printf("After ft_memmove():  %s\n", str10);


	char str5[50] = "ABCDEFGHIJKLMNOPQRSTUVWXYZ";
    char str6[50] = "ABCDEFGHIJKLMNOPQRSTUVWXYZ";
	char str8[50] = "ABCDEFGHIJKLMNOPQRSTUVWXYZ";
    //char str9[50] = "ABCDEFGHIJKLMNOPQRSTUVWXYZ";

    printf("Avant memcpy :  %s\n", str5);
    memcpy(str5 + 5, str5, 20);  
    printf("Après memcpy :  %s\n", str5);

    printf("\n");

    printf("Avant ft_memcpy :  %s\n", str8);
    ft_memcpy(str8 + 5, str8, 20);  
    printf("Après ft_memcpy :  %s\n", str8);

    printf("\n");

	printf("Avant memmove : %s\n", str6);
    memmove(str6 + 5, str6, 20);  
    printf("Après memmove : %s\n", str6);

	printf("\n");

    // printf("Avant ft_memmove : %s\n", str9);
    // ft_memmove(str9 + 5, str9, 20);  
    // printf("Après ft_memmove : %s\n", str9);

	char buf[40] = "bonjour pour poire";
	char * ptr;
	int    ch = 'p';
 
	/* This illustrates strrchr */
	ptr = strrchr( buf, ch );
	printf( "The last occurrence of %c in '%s' with strrchr is '%s'\n", ch, buf, ptr );

	ptr = ft_strrchr( buf, ch );
	printf( "The last occurrence of %c in '%s' with ft_strrchr is '%s'\n", ch, buf, ptr );

	printf("\n");

	ptr = strchr( buf, ch );
	printf( "The first occurrence of %c in '%s' with strrchr is '%s'\n", ch, buf, ptr );
	
	ptr = ft_strchr( buf, ch );
	printf( "The first occurrence of %c in '%s' with ft_strchr is '%s'\n", ch, buf, ptr );

	//printf("ft_strrchr : %s\n", ft_strrchr(test0, 'o'));
	printf("\n");

	char s1[50] = "aaa";
	char s2[50] = "aaz";

	printf("strncmp between %s, and %s is %d\n", s1, s2, strncmp(s1,s2,10));
	printf("ft_strncmp between %s, and %s is %d\n", s1, s2, ft_strncmp(s1,s2,10));

	printf("\n");

	char s3[50] = "";
	char s4[50] = "k";

	printf("strncmp between %s, and %s is %d\n", s3, s4, strncmp(s3,s4,10));
	printf("ft_strncmp between %s, and %s is %d\n", s1, s2, ft_strncmp(s3,s4,10));

	printf("\n");

	int numbers[] = {10, 20, 30, 40, 50};
    int target = 30;
    void *result;

    // Search for value 30 in the array
    result = memchr(numbers, target, sizeof(numbers));

    if (result != NULL) {
        size_t pos = ((int*)result - numbers);
        printf("Found %d at index %zu with memchr\n", target, pos);
    } else {
        printf("%d not found in array with memchr\n", target);
    }

	printf("\n");

	result = ft_memchr(numbers, target, sizeof(numbers));

    if (result != NULL) {
        size_t pos = ((int*)result - numbers);
        printf("Found %d at index %zu with ft_memchr \n", target, pos);
    } else {
        printf("%d not found in array with ft_memchr\n", target);
    }

	printf("\n");

	char data[] = "Hello, World!";
    char *resul;
    target = 'W';

    // Search for 'W' in first 13 bytes
    resul = memchr(data, target, 13);

    if (resul != NULL) {
        printf("Found '%c' at position with memchr %s\n", target, resul );
    } else {
        printf("Character '%c' not found with memchr\n", target);
    }

	printf("\n");

	resul = ft_memchr(data, target, 13);

    if (resul != NULL) {
        printf("Found '%c' at position with ft_memchr %s\n", target, resul );
    } else {
        printf("Character '%c' not found with ft_memchr\n", target);
    }

	printf("\n");

	char st1[50] = "aaa";
	char st2[50] = "aaa";

	printf("\n");

	printf("memcmp between %s, and %s is %d\n", st1, st2, memcmp(st1,st2,10));
	printf("ft_memcmp between %s, and %s is %d\n", st1, st2, ft_memcmp(st1,st2,10));

	char st3[50] = "";
	char st4[50] = "k";

	printf("\n");

	printf("memcmp between %s, and %s is %d\n", st3, st4, memcmp(s3,s4,10));
	printf("ft_memcmp between %s, and %s is %d\n", st3, st4, ft_memcmp(s3,s4,10));

	printf("\n");

	int numbers1[] = {53, 52, 15};
	int numbers2[] = {53, 62, 30};

	printf("memcmp between numbers1, and numbers2 is %d\n", memcmp(numbers1,numbers2,10));
	printf("ft_memcmp between numbers1, and numbers2 is %d\n", ft_memcmp(numbers1,numbers2,10));

	printf("\n");

	char nbr1[10] = "12";
	char nbr2[10] = "-12";
	char nbr3[10] = " 12";
	char nbr4[10] = " \f1grgr2";
	char nbr5[10] = "1grgr2";


	printf("atoi of %s is %d\n", nbr1,atoi(nbr1));
	printf("atoi of %s is %d\n", nbr2,atoi(nbr2));
	printf("atoi of %s is %d\n", nbr3,atoi(nbr3));
	printf("atoi of %s is %d\n", nbr4,atoi(nbr4));
	printf("atoi of %s is %d\n", nbr5,atoi(nbr5));

	printf("\n");

	printf("ft_atoi of %s is %d\n", nbr1,ft_atoi(nbr1));
	printf("ft_atoi of %s is %d\n", nbr2,ft_atoi(nbr2));
	printf("ft_atoi of %s is %d\n", nbr3,ft_atoi(nbr3));
	printf("ft_atoi of %s is %d\n", nbr4,ft_atoi(nbr4));
	printf("ft_atoi of %s is %d\n", nbr5,ft_atoi(nbr5));
	return (0);
}
